<style>
    html {
        scroll-snap-type: y mandatory;
        scroll-behavior: smooth;
        overflow-x: hidden;
    }

    .mpp-collection-section {
        position: relative;
        left: 50%;
        margin-left: -50vw;
        width: 100vw;
        background-color: #f4f4f4;
    }

    .mpp-collection-section * {
        padding: 0;
        margin: 0;
    }

    .mpp-collection-section h2 {
        font-size: 2.2rem;
    }

    .mpp-collection-section p {
        font-size: 1.3rem;
    }

    .mpp-collection-section li {
        list-style: none;
        font-size: 1.3rem;
    }

    .mpp-slider-track {
        position: absolute;
        top: 0;
        width: 100%;
        height: 100%;
        z-index: 2;
        pointer-events: none;
    }
    
    .mpp-drawer {
        position: absolute;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 30px;
        background-color: #f4f4f4;
        transition: transform 0.3s ease;
        overflow: auto;
        pointer-events: auto;
    }

    .mpp-drawer-bottom {
        top: auto;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 85vh;
        padding: 20px 50px;
        transform: translateY(100%);
    }

    .mpp-drawer-left {
        top: 0;
        left: 0;
        width: 400px;
        height: 100%;
        padding: 20px 50px;
        transform: translateX(-100%);
    }

    .mpp-drawer-right {
        top: 0;
        right: 0;
        width: 650px;
        height: 100%;
        padding: 20px 50px;
        transform: translateX(100%);
    }

    .mpp-drawer .mpp-drawer-close-icon {
        position: absolute;
        left: 30px;
        top: 20px;
        pointer-events: auto;
        cursor: pointer;
        width: 20px;
    }

    .mpp-gallery-content {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(15vw, 1fr));
        grid-auto-rows: min-content;
        gap: 1vw;
    }

    .mpp-info-content {
        text-align: justify;
    }

    .mpp-info-drawer h3 {
        margin-bottom: 10px;
    }

    .mpp-info-section {
        margin-bottom: 40px;
    }

    .mpp-info-exif {
        text-align: right;
    }

    .mpp-info-button-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .mpp-drawer-content {
        width: 100%;
        height: auto;
        max-width: 1800px;
    }

    .mpp-open.mpp-drawer-bottom {
        transform: translateY(0);
    }

    .mpp-open.mpp-drawer-left, .mpp-open.mpp-drawer-right {
        transform: translateX(0);
    }

    .mpp-gallery-image {
        width: 100%;
        aspect-ratio: 1 / 1;
        object-fit: cover;
        display: block;
    }

    .mpp-gallery-link {
        pointer-events: auto;
    }

    .mpp-slider-window {
        position: sticky;
        top: 0;
        width: 100%;
        height: 100vh;
        height: 100dvh;
        overflow: hidden;
    }

    .mpp-drawer-window {
        position: fixed;
        inset: 0;
        pointer-events: none;
        z-index: 100;
    }

    .mpp-drawer-window.mpp-open {
        pointer-events: auto;
    }

    .mpp-window-overlay {
        width: 100%;
        height: 100%;
        opacity: 0;
    }

    .mpp-open .mpp-window-overlay {
        background-color: black;
        opacity: 0.6;
    }

    .mpp-drawer-menu {
        position: absolute;
        width: 100%;
        bottom: 30px;
        display: flex;
        flex-direction: row;
        justify-content: center;
    }

    .mpp-drawer-menu li {
        width: 110px;
        text-align: center;
        border-right: 1px solid currentColor;
        pointer-events: auto;
        cursor: pointer;
    }

    .mpp-drawer-menu li:last-child {
        border: none;
    }

    .mpp-slide {
        position: relative;
        left: 50%;
        margin-left: -50vw;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100vh;
        height: 100lvh;
        scroll-snap-align: start;
    }

    .mpp-slide-image {
        position: relative;
        width: auto;
        height: auto;
        max-height: 70vh;
        max-width: 70vw;
        border: 0px solid white;
        box-sizing: content-box;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.25);
        transition: transform 0.3s ease;
    }

    .mpp-slide-content-wrapper {
        position: relative;
    }

    .mpp-slide-header {
        position: absolute;
        top: 0;
        right: 0;
        padding-bottom: 10px;
        transform-origin: bottom left;
        width: 100%;
        transform: translateX(100%) rotate(90deg);
    }

    .mpp-slider-nav {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 16px;
        position: absolute;
        width: fit-content;
        height: fit-content;
        top: 50%;
        left: 50px;
        transform: translateY(-50%);
    }

    .mpp-slider-nav-button {
        color: currentColor;
        text-decoration-line: none;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 16px;
        pointer-events: auto;
    }

    .mpp-slider-nav-number {
        pointer-events: auto;
        cursor: pointer;
    }

    .mpp-button-disabled {
        color: #f4f4f4;
    }

    .mpp-slider-nav-icon {
        width: 18px;
    }

    .mpp-detail-icon {
        width: 12px;
        transform-origin: center;
        transition: transform .2s ease;
    }

    .mpp-filter-content {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .mpp-filter-section {
        width: 100%;
    }

    .mpp-filter-section[open] .mpp-detail-icon {
        transform: rotate(180deg);
    }

    .mpp-filter-section-header {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        margin: 10px 0px;
    }

    .mpp-filter-section-content {
        margin: 10px 0px;
    }

    .mpp-filter-list {
        list-style-type: none;
        padding: 0;
    }
    
    .mpp-price-range-filter {
        width: 80%;
        margin: auto;
    }
    
    .mpp-currency-input-container {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
    }

    .mpp-currency-input-box {
        background-color: white;
        width: 110px;
        padding: 0px 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-sizing: border-box;
        height: fit-content;
    }

    .mpp-currency-input-box > label {
        display: none;
    }

    .mpp-currency-input {
        all: unset;
        -moz-appearance: textfield;
        text-align: right;
        margin: 0;
        padding: 4px 0;
    }

    .mpp-currency-input::-webkit-inner-spin-button,
    .mpp-currency-input::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .mpp-range-dual-slider {
        position: relative;
        min-height: 30px;
        padding-top: 10px;
    }

    .mpp-range-input {
        -webkit-appearance: none;
        appearance: none;
        height: 0;
        width: 100%;
        position: absolute;
        background-color: #C6C6C6;
        pointer-events: none;
    }

    .mpp-range-input::-webkit-slider-thumb {
        -webkit-appearance: none;
        pointer-events: all;
        width: 18px;
        height: 18px;
        background-color: #fff;
        border-radius: 50%;
        box-shadow: 0 0 0 1px #C6C6C6;
        cursor: pointer;
    }

    .mpp-range-input::-moz-range-thumb {
        -webkit-appearance: none;
        pointer-events: all;
        width: 18px;
        height: 18px;
        background-color: #fff;
        border-radius: 50%;
        box-shadow: 0 0 0 1px #C6C6C6;
        cursor: pointer;
    }

    .mpp-range-input::-webkit-slider-thumb:hover {
        background: #f7f7f7;
    }

    .mpp-range-input::-webkit-slider-thumb:active {
        box-shadow: inset 0 0 3px #387bbe;
        -webkit-box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
    }

    .mpp-range-input::-moz-range-thumb:hover {
        background: #f7f7f7;
    }

    .mpp-range-input::-moz-range-thumb:active {
        box-shadow: inset 0 0 3px #387bbe;
        -webkit-box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
    }

    .mpp-range-track {
        width: 100%;
        height: 2px;
        position: absolute;
        background-color: gray;
    }

    .mpp-slider-fill {
        width: 100%;
        height: 6px;
        position: absolute;
        background-color: black;
        transform: translateY(-2px);
    }

    .mpp-divider {
        width: 100%;
        border-top: 1px solid gray;
    }

    .mpp-filter-list-row {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .mpp-filter-button-container {
        padding-top: 20px;
    }


    @media(max-width: 750px) {
        .mpp-collection-section h2 {
            font-size: 1.8rem;
        }

        .mpp-drawer-menu {
            bottom: 50px;
        }

        .mpp-slider-nav {
            flex-direction: row;
            top: auto;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
        }

        .mpp-slider-nav-button {
            flex-direction: row;
            display: none;
        }

        .mpp-slider-nav-button svg {
            transform-origin: center center;
            transform: rotate(-90deg);
        }

        .mpp-slide-header {
            right: auto;
            left: auto;
            top: auto;
            bottom: 0;
            text-align: center;
            transform: translateY(100%);
        }

        .mpp-slide-image {
            max-height: 60vh;
            max-width: 90vw;
            border: 0px solid white;
        }

        .mpp-drawer-left, .mpp-drawer-right {
            position: absolute;
            top: auto;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 85vh;
            padding: 20px 50px;
            transform: translateY(100%);
        }

        .mpp-open.mpp-drawer-left, .mpp-open.mpp-drawer-right {
            transform: translateY(0);
        }
    }
</style>

<section class="mpp-collection-section">
    {% for product in collection.products %}
        <div id="slide-{{ forloop.index }}" class="mpp-slide">
            <div class="mpp-slide-content-wrapper">
                <img class="mpp-slide-image" src="{{ product.featured_image |  image_url  }}">
                <div class="mpp-slide-header">
                    <h2> {{product.title}} </h2>
                    <pre> Bristol, RI USA </pre>
                </div>
            </div>
        </div>
    {% endfor %}
    <div class="mpp-slider-track">
        <div id="mpp-slider-window" class="mpp-slider-window">
            <div class="mpp-slider-nav">
                <a id="mpp-slider-nav-button-up" class="mpp-slider-nav-button" href=''>
                    <pre>Prev</pre>
                    <svg class="mpp-slider-nav-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 67.4 34.7">
                        <polyline points="1 33.7 33.7 1 66.4 33.7" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"/>
                    </svg>
                </a>
                <pre id="mpp-slider-nav-number" class="mpp-slider-nav-number" onclick="toggleGallery()"> </pre>
                <a id="mpp-slider-nav-button-down" class="mpp-slider-nav-button" href=''>
                    <svg class="mpp-slider-nav-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 67.4 34.7">
                        <polyline points="66.4 1 33.7 33.7 1 1" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"/>
                    </svg>
                    <pre>Next</pre>
                </a>
            </div>
            <ul class="mpp-drawer-menu">
                <li onclick="toggleFilter()"><pre> Filter </pre></li>
                <li onclick="toggleGallery()"><pre> Gallery </pre></li>
                <li onclick="toggleInfo()"><pre> Info </pre></li>
            </ul>
        </div>
    </div>
</section>


<div id="mpp-drawer-window" class="mpp-drawer-window">
    <div class="mpp-window-overlay" onclick="closeAllDrawers()"> </div>
    <div id="mpp-filter" class="mpp-drawer mpp-drawer-left">
        <svg class="mpp-drawer-close-icon" onclick="toggleFilter()" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="currentColor"><path d="m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z"/></svg>
        <h2> Filter </h2>
        <form class="mpp-filter-content mpp-drawer-content">
            {%- for filter in collection.filters -%}
                <div class="mpp-divider"> </div>
                <details class="mpp-filter-section">
                <summary class="mpp-filter-section-header">
                    {{ filter.label }}
                    {%- if filter.active_values.size > 0 -%}
                        ({{ filter.active_values.size }})
                    {%- endif -%}
                    <svg class="mpp-detail-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 67.4 34.7">
                        <polyline points="1 33.7 33.7 1 66.4 33.7" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="8"/>
                    </svg>
                </summary>

                <div class="mpp-filter-section-content">
                    {%- case filter.type -%}
                    {%- when 'boolean' -%}
                        <ul class="mpp-filter-list">
                            <li>
                            <label class="mpp-filter-list-row" for="Filter-{{ filter.param_name }}-{{ filter.true_value.value }}">
                                <div>
                                    <input type="checkbox"
                                    name="{{ filter.param_name }}"
                                    value="{{ filter.true_value.value }}"
                                    id="Filter-{{ filter.param_name }}"
                                    {% if filter.true_value.active -%}checked{%- endif %}
                                    {% if filter.true_value.count == 0 and filter.true_value.active == false -%}disabled{%- endif -%}
                                >
                                {{ filter.true_value.label }}
                                </div>
                                {{ filter.true_value.count }}
                            </label>
                            </li>
                            <li>
                            <label class="mpp-filter-list-row" for="Filter-{{ filter.param_name }}-{{ filter.false_value.value }}">
                                <div>
                                    <input type="checkbox"
                                    name="{{ filter.param_name }}"
                                    value="{{ filter.false_value.value }}"
                                    id="Filter-{{ filter.param_name }}"
                                    {% if filter.false_value.active -%}checked{%- endif %}
                                    {% if filter.false_value.count == 0 and filter.false_value.active == false -%}disabled{%- endif %}
                                >
                                {{ filter.false_value.label }}
                                </div>
                                {{ filter.false_value.count }}
                            </label>
                            </li>
                        </ul>

                    {%- when 'list' -%}
                        <ul class="mpp-filter-list">
                        {%- for filter_value in filter.values -%}
                            <li>
                            <label class="mpp-filter-list-row" for="Filter-{{ filter.param_name }}-{{ forloop.index }}">
                                <div>
                                    <input type="checkbox"
                                    name="{{ filter_value.param_name }}"
                                    value="{{ filter_value.value }}"
                                    id="Filter-{{ filter.param_name }}-{{ forloop.index }}"
                                    {% if filter_value.active -%}checked{%- endif %}
                                    {% if filter_value.count == 0 and filter_value.active == false -%}disabled{%- endif %}
                                >
                                    <span>
                                    {%- case filter_value.display.type -%}
                                        {%- when 'colors' -%}
                                        {% liquid
                                            assign size_limit = filter_value.display.value.size | at_most: 4
                                            assign rotation = '0deg'
                                            if size_limit == 2
                                            assign rotation = '45deg'
                                            endif

                                            assign angle_increment = 360 | divided_by: size_limit
                                            assign angle = 0
                                        %}
                                        {%- capture conic_gradient -%}
                                            {%- for color in filter_value.display.value limit: size_limit -%}
                                            {{ color }} {{ angle }}deg{%- assign angle = angle | plus: angle_increment %} {{ angle }}deg{%- unless forloop.last %}, {%- endunless -%}
                                            {%- endfor -%}
                                        {%- endcapture -%}
                                        <span style="
                                            width: 25px;
                                            height: 25px;
                                            border-radius: 50%;
                                            display: flex;
                                            justify-content: center;
                                            align-items: center;
                                            background: conic-gradient({{ conic_gradient }}); transform: rotateZ({{ rotation }});
                                        "></span>
                                        {%- when 'image' -%}
                                        {{
                                            filter_value.display.value
                                            | image_url: width: 25
                                            | image_tag: alt: filter_value.display.value.alt
                                        }}
                                        {%- else -%}
                                        <span class="visual-display__child"></span>
                                    {%- endcase -%}
                                    </span>
                                    {{ filter_value.label }}
                                </div>
                                {{ filter_value.count }}
                            </label>
                            </li>
                        {%- endfor -%}
                        </ul>

                    {%- when 'price_range' -%}
                        <div class="mpp-price-range-filter">
                            <div class="mpp-range-dual-slider">
                                <div class="mpp-range-track"> </div>
                                <div class="mpp-slider-fill" id="Fill-{{ filter.param_name }}"> </div>
                                <input type="range" id="Range-{{ filter.min_value.param_name }}" class="mpp-range-input" min="0" max="{{ filter.range_max | money_without_currency | replace: ',', '' }}" value="0" oninput="updateSlider(this, '{{ filter.param_name }}', '{{ filter.min_value.param_name }}', '{{ filter.max_value.param_name }}')">
                                <input type="range" id="Range-{{ filter.max_value.param_name }}" class="mpp-range-input" min="0" max="{{ filter.range_max | money_without_currency | replace: ',', '' }}" value="{{ filter.range_max | money_without_currency | replace: ',', '' }}" oninput="updateSlider(this, '{{ filter.param_name }}', '{{ filter.min_value.param_name }}', '{{ filter.max_value.param_name }}')">
                            </div>

                            <div class="mpp-currency-input-container">
                                <div class="mpp-currency-input-box">
                                    <span>{{ cart.currency.symbol }}</span>

                                    <input name="{{ filter.min_value.param_name }}"
                                    id="Field-{{ filter.min_value.param_name }}" 
                                    class="mpp-currency-input"
                                    {% if filter.min_value.value -%}
                                        value="{{ filter.min_value.value | money_without_currency | replace: ',', '' }}"
                                    {%- endif %}
                                    type="number"
                                    placeholder="0"
                                    min="0"
                                    max="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                                    onchange="updateSlider(this, '{{ filter.param_name }}', '{{ filter.min_value.param_name }}', '{{ filter.max_value.param_name }}')"
                                    >

                                    <label for="Field-{{ filter.min_value.param_name }}"> </label>
                                </div>
                                <p>-</p>
                                <div class="mpp-currency-input-box">
                                    <span>{{ cart.currency.symbol }}</span>

                                    <input name="{{ filter.max_value.param_name }}"
                                    id="Field-{{ filter.max_value.param_name }}"
                                    class="mpp-currency-input"
                                    {% if filter.max_value.value -%}
                                        value="{{ filter.max_value.value | money_without_currency | replace: ',', '' }}"
                                    {%- endif %}
                                    type="number"
                                    placeholder="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                                    min="0"
                                    max="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                                    onchange="updateSlider(this, '{{ filter.param_name }}', '{{ filter.min_value.param_name }}', '{{ filter.max_value.param_name }}')"
                                    >

                                    <label for="Field-{{ filter.max_value.param_name }}"> </label>
                                </div>
                            </div>
                        </div>
                    {%- endcase -%}
                </div>
                </details>
            {%- endfor -%}
            <div class="mpp-divider"> </div>

            <div>
                {%- for filter in collection.filters -%}
                {%- if filter.type == "price_range" -%}
                    {%- if filter.min_value.value != nil or filter.max_value.value != nil -%}
                    <p>
                        <a href="{{ filter.url_to_remove }}">
                        {%- assign min_value = filter.min_value.value | default: 0 -%}
                        {%- assign max_value = filter.max_value.value | default: filter.range_max -%}
                        {{ min_value | money }} - {{ max_value | money }} X
                        </a>
                    </p>
                    {%- endif -%}
                {%- else -%}
                    {%- for filter_value in filter.active_values -%}
                    <p>
                        <a href="{{ filter_value.url_to_remove }}">
                        {{ filter.label }}: {{ filter_value.label }} X
                        </a>
                    </p>
                    {%- endfor -%}
                {%- endif -%}
                {%- endfor -%}
            </div>

            <div class="mpp-filter-button-container">
                <input class="button" type="submit" value="Apply">
                <a class="button" href="{{ collection.url }}?sort_by={{ collection.sort_by }}">Clear all</a>
            </div>
        </form>
    </div>
    <div id="mpp-gallery" class="mpp-drawer mpp-drawer-bottom">
        <svg class="mpp-drawer-close-icon" onclick="toggleGallery()" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="currentColor"><path d="m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z"/></svg>
        <h2> Gallery </h2>
        <div class="mpp-gallery-content mpp-drawer-content">
            {% for product in collection.products %}
                <a class="mpp-gallery-link" href="#slide-{{ forloop.index }}" onclick="toggleGallery()">
                    <img class="mpp-gallery-image" src="{{ product.featured_image |  image_url  }}" loading="lazy">
                </a>
            {% endfor %}
        </div>
    </div>
    <div id="mpp-info" class="mpp-drawer mpp-drawer-right">
        <svg class="mpp-drawer-close-icon" onclick="toggleInfo()" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="currentColor"><path d="m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z"/></svg>
        <h2> Image Info </h2>
        {% for product in collection.products %}
            <div class="mpp-info-content mpp-drawer-content" data-product="{{ forloop.index }}">
                <div class="mpp-info-heading mpp-info-section">
                    <h3> {{ product.title }} </h3>
                    <pre> Bristol, RI USA </pre>
                    <pre> September 26, 1991 </pre>
                </div>
                <div>
                    {{ product.description }}
                </div>
                <div class="mpp-info-exif">
                    <pre>Nikon Z7</pre>
                    <pre>Nikkor Z 24-120 f/4 S</pre>
                    <pre>ISO 100, f/5.6, 1/125 sec, 120mm</pre>
                    <pre>HDR</pre>
                </div>
                <div class="mpp-info-button-container">
                    <a class="button" href="{{ product.url }}">Buy Now</a>
                </div>
            </div>
        {% endfor %}
    </div>
</div>

<script>
    const slideNumberIndicator = document.getElementById("mpp-slider-nav-number");
    const slideUpButton = document.getElementById("mpp-slider-nav-button-up");
    const slideDownButton = document.getElementById("mpp-slider-nav-button-down");
    const slideList = document.querySelectorAll(".mpp-slide");
    const infoList = document.querySelectorAll(".mpp-info-content");
    const drawerWindow = document.getElementById("mpp-drawer-window");
    const gallery = document.getElementById("mpp-gallery");
    const filter = document.getElementById("mpp-filter");
    const info = document.getElementById("mpp-info");

    const intersectionCallback = (entries) => {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                const currentIndex = Array.from(slideList).indexOf(entry.target);

                slideNumberIndicator.textContent = `${currentIndex+1}/${slideList.length}`;

                slideUpButton.href = `#slide-${currentIndex}`;
                slideDownButton.href = `#slide-${currentIndex + 2}`;
                
                infoList.forEach((infoItem) => {
                    if (infoItem.dataset.product == currentIndex + 1) {
                        infoItem.style.display = "block";
                    } else {
                        infoItem.style.display = "none";
                    }
                });

                if (currentIndex === 0) {
                    slideUpButton.removeAttribute('href');
                    slideUpButton.classList.add("mpp-button-disabled");
                } else {
                    slideUpButton.classList.remove("mpp-button-disabled");
                }

                if (currentIndex === slideList.length-1) {
                    slideDownButton.removeAttribute('href');
                    slideDownButton.classList.add("mpp-button-disabled");
                } else {
                    slideDownButton.classList.remove("mpp-button-disabled");
                }
            }
        });
    };

    const intersectionOptions = {
        threshold: 0.75
    };

    const observer = new IntersectionObserver( intersectionCallback, intersectionOptions );

    const sectionInit = () => {
        slideList.forEach(slide => observer.observe(slide));
    };

    function toggleFilter() {
        drawerWindow.classList.toggle("mpp-open");
        filter.classList.toggle("mpp-open");
        gallery.classList.remove("mpp-open");
        info.classList.remove("mpp-open");
    }

    function toggleGallery() {
        drawerWindow.classList.toggle("mpp-open");
        gallery.classList.toggle("mpp-open");
        filter.classList.remove("mpp-open");
        info.classList.remove("mpp-open");
    }

    function toggleInfo() {
        drawerWindow.classList.toggle("mpp-open");
        info.classList.toggle("mpp-open");
        filter.classList.remove("mpp-open");
        gallery.classList.remove("mpp-open");
    }

    function closeAllDrawers() {
        drawerWindow.classList.remove("mpp-open");
        filter.classList.remove("mpp-open");
        gallery.classList.remove("mpp-open");
        info.classList.remove("mpp-open");
    }

    function updateSlider( self, filterName, filterMinName, filterMaxName) {
        const sliderFill = document.getElementById("Fill-" + filterName);
        const minField = document.getElementById("Field-" + filterMinName);
        const maxField = document.getElementById("Field-" + filterMaxName);
        const minRange = document.getElementById("Range-" + filterMinName);
        const maxRange = document.getElementById("Range-" + filterMaxName);

        const separation = 1;
        const maxPossibleValue = Number(maxRange.max);

        let minRangeValue = Number(minRange.value);
        let maxRangeValue = Number(maxRange.value);
        let minFieldValue = Number(minField.value);
        let maxFieldValue = Number(maxField.value);

        if ( self === minRange ) {
            if ( minRangeValue > maxRangeValue - separation ) {
                minRangeValue = maxRangeValue - separation;
            }

            minRange.value = String(minRangeValue);
            minField.value = String(minRangeValue);

        } else if ( self === maxRange ) {
            if ( maxRangeValue < minRangeValue + separation ) {
                maxRangeValue = minRangeValue + separation;
            }

            maxRange.value = String(maxRangeValue);
            maxField.value = String(maxRangeValue);

        } else if (self === minField ) {
            if ( minFieldValue > maxFieldValue - separation ) {
                minFieldValue = maxFieldValue - separation;
            }

            minRange.value = String(minFieldValue);
            minField.value = String(minFieldValue);

        } else if (self === maxField ) {
            if ( maxFieldValue < minFieldValue + separation ) {
                maxFieldValue = minFieldValue + separation;
            }

            maxRange.value = String(maxFieldValue);
            maxField.value = String(maxFieldValue);

        }

        let percentMin = (Number(minRange.value) / maxPossibleValue) * 100;
        let percentMax = (Number(maxRange.value) / maxPossibleValue) * 100;

        sliderFill.style.left = percentMin + "%";
        sliderFill.style.width = (percentMax - percentMin) + "%";

    }

    document.addEventListener('DOMContentLoaded', sectionInit);

</script>


{% schema %}
{
    "name": "Collection Page Simple",
    "settings": []
}
{% endschema %}